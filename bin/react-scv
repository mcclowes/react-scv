#!/usr/bin/env node

'use strict';

const path = require('path');
const Vorpal = require('vorpal');
const yeoman = require('yeoman-environment');
const commands = require('../package.json').commands;

const cli = new Vorpal();
const env = yeoman.createEnv();

let registerCliCommand = (command) => {

  const name = command.name;
  const generator = command.generator;
  const options = command.options || [];
  const dir = path.resolve(__dirname, `../commands/${name}`);

  if (generator) {
    env.register(require.resolve(dir), `react-scv:${name}`);
  }

  let cliCommand = cli.command(name, command.description);
  
   // Required for jest options e.g. `npm test -- --watch`
  if (name.toLowerCase().includes('test')) {
    cliCommand.allowUnknownOptions();
  }
  
  Object
  .keys(options)
  .map(option => {
    if (Array.isArray(options[option])) {
      cliCommand.option.apply(cliCommand, [option].concat(options[option]));
    } else {
      cliCommand.option(option, options[option]);
    }
  });

  cliCommand
  .action(function (args) {

    const done = (exitCode) => {
      process.exit(exitCode || 0)
    };

    if (this.commandObject._events) {
      const options = Object
      .keys(this.commandObject._events)
      .reduce((base, key) => {
        base[key] = this.commandObject[key];
        return base;
      }, {});

      args.options = Object.assign(options, args.options);
    }

    process.env.NODE_ENV = command.environment || 'development';

    if (generator) {
      env.run(`react-scv:${name}`, done);
    } else {

      const promise = require(dir)(args, done);
      if (promise) {
        promise.catch((error) => {
          if(error) {
            console.error(error)
          }
          done(1);
        });
      }

    }
  });
};

commands.map(registerCliCommand);

cli.find('exit').hidden();

cli.parse.apply(cli, process.argv[2] ? [process.argv] : [process.argv.concat(['help'])]);
